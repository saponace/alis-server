#! /bin/bash


# DATA RAID1 MDADM device UUID
TV_DEVICE_UUID="c31f1a91-1c8b-44e8-b922-832465c3d2e9"
# MOVIES disk UUID
MOVIES_DEVICE_UUID="0edd1cec-c43c-4cda-9e95-f453305c27c6"
# TV disk UUID
DATA_MDADM_DEVICE_UUID="e370aeb9-d4b1-4e50-a554-cb999630e443"
# Disk that acts as a buffer for downloaded files.
# Used to prevent useless writes on other disks
DOWNLOAD_PROXY_DEVICE_UUID="782582e2-21a8-4582-b395-efce5c413e8d"


# Prevent sudo timeout
sudo -v
while true; do
    sudo -nv; sleep 1m
    kill -0 $$ 2>/dev/null || exit   # Exit when the parent process is not running any more
done &


# Check if a device is available
# $1 Device name
# $2 Device UUID
function check_device_available() {
    sentence_beginning="$1 device is"
    if [ -e "/dev/disk/by-uuid/$2" ] ;
    then
        printf "%s \e[32m%s\e[0m\n" "${sentence_beginning}" "available"
        return 0
    else
        printf "%s \e[31m%s\e[0m\n" "${sentence_beginning}" "missing"
        return 1
    fi
}


function display_error_message_devices_not_available() {
    echo ""
    echo "Error. Please make sure all drives are available and try again"
    echo "If it is the first time you run this script and haven't assembled the data RAID1 MDADM array, please run the following command and retry (where \"/dev/sdX\" and \"/dev/sdY\" are the two disks composing the array): "
    echo "    \"sudo mdadm --assemble --scan --verbose /dev/md0 /dev/sdX /dev/sdY\""
}


function check_all_disks_are_available(){
    check_device_available "Data" ${DATA_MDADM_DEVICE_UUID}
    data_status=$?
    check_device_available "TV" ${MOVIES_DEVICE_UUID}
    tv_status=$?
    check_device_available "Movies" ${TV_DEVICE_UUID}
    movies_status=$?
    if [ ${data_status} -eq 0 ] && \
        [ ${tv_status} -eq 0 ] && \
        [ ${movies_status} -eq 0 ] ;
    then
        return 0
    else
        return 1
    fi
}


# Print logs before and after any processing function execution
# $1: Action applied to the device
# $2: Name of the device that is being processed
# $3: Processing function and parameters
function process_device_decorator(){
    printf "$1 $2 device... "
    ${@:3}
    printf "Done !\n"
}


# Print logs before and after mount function execution
# $1: Name of the device that is being mounted
# $2: Mount function and parameters
function mount_device_decorator(){
    process_device_decorator "Mounting" $1 ${@:2}
}


# Print logs before and after umount function execution
# $1: Name of the device that is being umounted
# $2: Umount function and parameters
function umount_device_decorator(){
    process_device_decorator "Umounting" $1 ${@:2}
}


# $1: UUID of luks device to get passphrase of
function get_luks_passwd(){
    # Prompt for the device LUKS passphrase and loop infinitely until the passphrase is correct
    echo "Enter LUKS passphrase"
    read -s LUKS_PASSWD
    echo "Checking passphrase ..."
    until $(printf ${LUKS_PASSWD} | sudo cryptsetup luksOpen --test-passphrase /dev/disk/by-uuid/$1 -d -)
    do
        echo "Passphrase not valid, please enter proper passphrase"
        read -s LUKS_PASSWD
    done
    echo "Passphrase validated !"
}


# $1: device UUID
# $2: LUKS mapper name
# $3: Mount point
function mount_luks_device(){
    printf ${LUKS_PASSWD} | sudo cryptsetup open /dev/disk/by-uuid/$1 $2 -d -
    sudo mount /dev/mapper/$2 $3
}


# $1: LUKS mapper name
function umount_luks_device(){
    sudo umount /dev/mapper/$1
    sudo cryptsetup close /dev/mapper/$1
}


function mount_all_disks(){
    if check_all_disks_are_available ;
    then
        # Prompt LUKS passphrases and check validity
        get_luks_passwd ${DATA_MDADM_DEVICE_UUID}

        mount_device_decorator "DATA" mount_luks_device ${DATA_MDADM_DEVICE_UUID} data-luks-mapper /mnt
        mount_device_decorator "MOVIES" mount_luks_device ${MOVIES_DEVICE_UUID} movies-luks-mapper /mnt/media/movies
        mount_device_decorator "TV" mount_luks_device ${TV_DEVICE_UUID} tv-luks-mapper /mnt/media/tv

        # Unset password and remove it from memroy
        unset LUKS_PASSWD

        mount_device_decorator "download_proxy" sudo mount --uuid ${DOWNLOAD_PROXY_DEVICE_UUID} /mnt/torrents
    else
        display_error_message_devices_not_available
        exit 1
   fi
}

function umount_all_disks(){
    if check_all_disks_are_available ;
    then
      umount_device_decorator "download_proxy" sudo umount /dev/disk/by-uuid/${DOWNLOAD_PROXY_DEVICE_UUID}
      umount_device_decorator "TV" umount_luks_device tv-luks-mapper
      umount_device_decorator "MOVIES" umount_luks_device movies-luks-mapper
      umount_device_decorator "DATA" umount_luks_device data-luks-mapper
    else
        display_error_message_devices_not_available
        exit 1
   fi
}


function show_usage(){
    echo "Usage: $0 -c, --check : Check which disks are available"
    echo "       $0 -m, --mount : Mount all disks (interactive)"
    echo "       $0 -u, --umount : Umount all disks (interactive)"
    echo "       $0 -h, --help : Display this help"
}


function main(){
case $1 in
    -c|--check)
        check_all_disks_are_available
    ;;
    -m|--mount)
        mount_all_disks
    ;;
    -u|--umount)
        umount_all_disks
    ;;
    -h|--help|*)
        show_usage
    ;;
esac
}

main $*
